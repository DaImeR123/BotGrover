import os
import django
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from asgiref.sync import sync_to_async
from django.utils import timezone

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "zelen_pro.settings")
django.setup()

from plants.models import Planting

TOKEN = "5447861520:AAHeBhte_6lCeo8fPqh1o3haymFAXCF-c6g"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω


@sync_to_async
def get_current_plantings():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Å–∞–¥–∫–∏"""
    today = timezone.now().date()
    return list(
        Planting.objects.filter(harvest_date__gte=today)
        .order_by("harvest_date")
        .select_related("culture")
    )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "üå± *–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–∫—Ä–æ–∑–µ–ª–µ–Ω—å—é.*\n\n"
        "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/current - —Ç–µ–∫—É—â–∏–µ –ø–æ—Å–∞–¥–∫–∏\n"
        "/sell [ID] [–∫–æ–ª-–≤–æ] - –ø—Ä–æ–¥–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞",
        parse_mode="Markdown"
    )


async def current_plantings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Å–∞–¥–∫–∏"""
    try:
        plantings = await get_current_plantings()

        if not plantings:
            await update.message.reply_text("üåæ –°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å–∞–¥–æ–∫ –Ω–µ—Ç.")
            return

        today = timezone.now().date()
        total = len(plantings)

        message = (
            f"üåø *–¢–µ–∫—É—â–∏–µ –ø–æ—Å–∞–¥–∫–∏* (–≤—Å–µ–≥–æ: {total}):\n\n"
            "‚ö†Ô∏è *–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏*\n\n"
        )

        for p in plantings:
            days_left = max((p.harvest_date - today).days, 0)
            sale_deadline = p.sale_deadline.strftime("%Y-%m-%d") if p.sale_deadline else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"

            message += (
                f"‚ñ´Ô∏è *ID {p.id}: {p.culture.name}*\n"
                f"‚îú –ü–æ—Å–∞–∂–µ–Ω–æ: `{p.plant_date}`\n"
                f"‚îú –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {p.quantity} —à—Ç.\n"
                f"‚îú –°–æ–∑—Ä–µ–µ—Ç: `{p.harvest_date}` (*–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω.*)\n"
                f"‚îú –ü—Ä–æ–¥–∞—Ç—å –¥–æ: `{sale_deadline}`\n"
                f"‚îî –°—Ç–∞—Ç—É—Å: _{p.get_status_display()}_\n\n"
            )

        await update.message.reply_text(message, parse_mode="Markdown")

    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö!")
        print(f"Error: {e}")


@sync_to_async
def sell_plants(planting_id: int, amount: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ç–µ–Ω–∏–π –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏"""
    try:
        planting = Planting.objects.get(id=planting_id)

        if planting.quantity < amount:
            return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞—Å—Ç–µ–Ω–∏–π. –î–æ—Å—Ç—É–ø–Ω–æ: {planting.quantity}"

        planting.quantity -= amount

        if planting.quantity == 0:
            planting.delete()
            return True, "–í–µ—Å—å –æ—Å—Ç–∞—Ç–æ–∫ –ø—Ä–æ–¥–∞–Ω. –ü–æ—Å–∞–¥–∫–∞ —É–¥–∞–ª–µ–Ω–∞."
        else:
            planting.save()
            return True, f"‚úÖ –ü—Ä–æ–¥–∞–Ω–æ {amount} —à—Ç. –û—Å—Ç–∞–ª–æ—Å—å: {planting.quantity}"

    except Planting.DoesNotExist:
        return False, "‚ùå –ü–æ—Å–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    except Exception as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"


async def sell(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sell"""
    args = context.args

    if len(args) != 2:
        await update.message.reply_text(
            "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç*\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/sell [ID] [–∫–æ–ª-–≤–æ]`\n"
            "–ü—Ä–∏–º–µ—Ä: `/sell 5 10`",
            parse_mode="Markdown"
        )
        return

    try:
        planting_id = int(args[0])
        amount = int(args[1])

        if amount <= 0:
            await update.message.reply_text("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return

    except ValueError:
        await update.message.reply_text("‚ùå ID –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!")
        return

    success, message = await sell_plants(planting_id, amount)
    await update.message.reply_text(message)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    await update.message.reply_text(
        "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/current - –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Å–∞–¥–∫–∏\n"
        "/sell [ID] [–∫–æ–ª-–≤–æ] - –ø—Ä–æ–¥–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞",
        parse_mode="Markdown"
    )


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("current", current_plantings))
    application.add_handler(CommandHandler("sell", sell))
    application.add_handler(CommandHandler("help", help_command))

    # –ó–∞–ø—É—Å–∫
    application.run_polling()


if __name__ == "__main__":
    main()