import os
import django
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from asgiref.sync import sync_to_async
from django.utils import timezone  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç!

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'zelen_pro.settings')
django.setup()

from plants.models import Planting

TOKEN = "5447861520:AAHeBhte_6lCeo8fPqh1o3haymFAXCF-c6g"

@sync_to_async
def get_current_plantings():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø–æ—Å–∞–¥–∫–∏"""
    today = timezone.now().date()
    return list(
        Planting.objects.filter(harvest_date__gte=today)
        .order_by("harvest_date")
        .select_related("culture")
    )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "üå± –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–∫—Ä–æ–∑–µ–ª–µ–Ω—å—é.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/current - —Ç–µ–∫—É—â–∏–µ –ø–æ—Å–∞–¥–∫–∏\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞"
    )


async def current_plantings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Å–∞–¥–∫–∏"""
    try:
        plantings = await get_current_plantings()

        if not plantings:
            await update.message.reply_text("üåæ –°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å–∞–¥–æ–∫ –Ω–µ—Ç.")
            return

        today = timezone.now().date()
        message = "üåø *–¢–µ–∫—É—â–∏–µ –ø–æ—Å–∞–¥–∫–∏:*\n\n"

        for p in plantings:
            days_left = (p.harvest_date - today).days
            message += (
                f"‚ñ´Ô∏è *{p.culture.name}*\n"
                f"‚îú –ü–æ—Å–∞–∂–µ–Ω–æ: `{p.plant_date}`\n"
                f"‚îú –°–æ–∑—Ä–µ–µ—Ç: `{p.harvest_date}` (*–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω.*)\n"
                f"‚îú –ü—Ä–æ–¥–∞—Ç—å –¥–æ: `{p.sale_deadline}`\n"
                f"‚îî –°—Ç–∞—Ç—É—Å: _{p.get_status_display()}_\n\n"
            )

        await update.message.reply_text(message, parse_mode="Markdown")

    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö!")
        print(f"Error: {e}")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    await update.message.reply_text(
        "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/current - –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Å–∞–¥–∫–∏\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞",
        parse_mode="Markdown"
    )


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("current", current_plantings))
    application.add_handler(CommandHandler("help", help_command))

    # –ó–∞–ø—É—Å–∫
    application.run_polling()


if __name__ == "__main__":
    main()