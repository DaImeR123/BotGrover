import os
import django
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    filters, 
    ConversationHandler, 
    ContextTypes,
    CallbackQueryHandler
)
from asgiref.sync import sync_to_async
from django.utils import timezone
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "zelen_pro.settings")
django.setup()

from plants.models import Planting, Culture

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å–∞–¥–∫–∏
CULTURE, QUANTITY = range(2)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–∞–¥–∫–∏
EDIT_QUANTITY = 0

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

if not TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –ì–¥–µ –æ–Ω?. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ .env —É–∫–∞–∑–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_BOT_TOKEN")

@sync_to_async
def get_available_cultures():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä"""
    return list(Culture.objects.all().order_by('name'))

@sync_to_async
def get_culture_details(culture_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É–ª—å—Ç—É—Ä–µ"""
    try:
        culture = Culture.objects.get(id=culture_id)
        return True, (
            f"*{culture.name}*\n"
            f"‚îú –°—Ä–æ–∫ —Å–æ–∑—Ä–µ–≤–∞–Ω–∏—è: {culture.grow_days} –¥–Ω–µ–π\n"
            f"‚îú –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏: {culture.expire_days} –¥–Ω–µ–π\n"
            f"‚îú –ì—Ä–∞–º–º –Ω–∞ –ª–æ—Ç–æ–∫: {culture.grams_per_tray} –≥\n"
            f"‚îú –ó–∞–º–∞—á–∏–≤–∞–Ω–∏–µ: {'–î–∞' if culture.soaking_required else '–ù–µ—Ç'}\n"
            f"‚îú –ü—Ä–∏–∂–∏–º: {culture.press_weight} –∫–≥\n"
            f"‚îú –î–Ω–µ–π –Ω–∞ –ø—Ä–æ—Ä–∞—Å—Ç–∞–Ω–∏–µ: {culture.germination_days}\n"
            f"‚îî –î–Ω–µ–π –Ω–∞ —Å–≤–µ—Ç—É: {culture.light_days}"
        )
    except Culture.DoesNotExist:
        return False, "‚ùå –ö—É–ª—å—Ç—É—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

@sync_to_async
def create_planting(culture_id: int, quantity: int):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –ø–æ—Å–∞–¥–∫—É"""
    try:
        culture = Culture.objects.get(id=culture_id)
        planting = Planting.objects.create(
            culture=culture,
            quantity=quantity,
            plant_date=timezone.now().date()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É, –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
        )
        return True, (
            f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–æ—Å–∞–¥–∫–∞:\n"
            f"–ö—É–ª—å—Ç—É—Ä–∞: {culture.name}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
            f"–î–∞—Ç–∞ –ø–æ—Å–∞–¥–∫–∏: {planting.plant_date}\n"
            f"–î–∞—Ç–∞ —Å–æ–∑—Ä–µ–≤–∞–Ω–∏—è: {planting.harvest_date}\n"
            f"–ü—Ä–æ–¥–∞—Ç—å –¥–æ: {planting.sale_deadline}"
        )
    except Exception as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å–∞–¥–∫–∏: {str(e)}"

@sync_to_async
def get_current_plantings():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Å–∞–¥–∫–∏"""
    today = timezone.now().date()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É, –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
    return list(
        Planting.objects.filter(harvest_date__gte=today)
        .order_by("harvest_date")
        .select_related("culture")
    )

@sync_to_async
def delete_planting(planting_id: int):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ—Å–∞–¥–∫—É"""
    try:
        planting = Planting.objects.get(id=planting_id)
        culture_name = planting.culture.name
        planting.delete()
        return True, f"‚úÖ –ü–æ—Å–∞–¥–∫–∞ {planting_id} ({culture_name}) —É–¥–∞–ª–µ–Ω–∞"
    except Planting.DoesNotExist:
        return False, "‚ùå –ü–æ—Å–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    except Exception as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}"

@sync_to_async
def edit_planting_quantity(planting_id: int, new_quantity: int):
    """–ò–∑–º–µ–Ω—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ç–µ–Ω–∏–π –≤ –ø–æ—Å–∞–¥–∫–µ"""
    try:
        planting = Planting.objects.get(id=planting_id)
        old_quantity = planting.quantity
        planting.quantity = new_quantity
        planting.save()
        return True, f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ç–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ —Å {old_quantity} –Ω–∞ {new_quantity}"
    except Planting.DoesNotExist:
        return False, "‚ùå –ü–æ—Å–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    except Exception as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏: {str(e)}"

@sync_to_async
def get_planting_info(planting_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–∞–¥–∫–µ"""
    try:
        planting = Planting.objects.select_related('culture').get(id=planting_id)
        return True, planting
    except Planting.DoesNotExist:
        return False, None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "üå± *–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–∫—Ä–æ–∑–µ–ª–µ–Ω—å—é.*\n\n"
        "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/current - —Ç–µ–∫—É—â–∏–µ –ø–æ—Å–∞–¥–∫–∏\n"
        "/new - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ—Å–∞–¥–∫—É\n"
        "/edit [ID] - –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
        "/delete [ID] - —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–∞–¥–∫—É\n"
        "/sell [ID] [–∫–æ–ª-–≤–æ] - –ø—Ä–æ–¥–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞",
        parse_mode="Markdown"
    )

async def current_plantings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Å–∞–¥–∫–∏"""
    try:
        plantings = await get_current_plantings()

        if not plantings:
            keyboard = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–∞–¥–∫—É", callback_data="new")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "üåæ –°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å–∞–¥–æ–∫ –Ω–µ—Ç.",
                reply_markup=reply_markup
            )
            return

        today = timezone.now().date()
        total = len(plantings)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ—Å–∞–¥–∫–∏ –≤ –Ω–∞—á–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = (
            f"üåø *–¢–µ–∫—É—â–∏–µ –ø–æ—Å–∞–¥–∫–∏* (–≤—Å–µ–≥–æ: {total})*\n\n"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –ø–æ—Å–∞–¥–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏
        for p in plantings:
            days_left = max((p.harvest_date - today).days, 0)
            sale_deadline = p.sale_deadline.strftime("%Y-%m-%d") if p.sale_deadline else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
            culture = p.culture

            planting_message = (
                f"‚ñ´Ô∏è *ID {p.id}: {culture.name}*\n"
                f"‚îú –ü–æ—Å–∞–∂–µ–Ω–æ: `{p.plant_date}`\n"
                f"‚îú –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {p.quantity} —à—Ç.\n"
                f"‚îú –ì—Ä–∞–º–º –Ω–∞ –ª–æ—Ç–æ–∫: {culture.grams_per_tray} –≥\n"
                f"‚îú –ó–∞–º–∞—á–∏–≤–∞–Ω–∏–µ: {'–î–∞' if culture.soaking_required else '–ù–µ—Ç'}\n"
                f"‚îú –ü—Ä–∏–∂–∏–º: {culture.press_weight} –∫–≥\n"
                f"‚îú –°–æ–∑—Ä–µ–µ—Ç: `{p.harvest_date}` (*–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω.*)\n"
                f"‚îú –ü—Ä–æ–¥–∞—Ç—å –¥–æ: `{sale_deadline}`\n"
                f"‚îî –°—Ç–∞—Ç—É—Å: _{p.get_status_display()}_"
            )

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ—Å–∞–¥–∫–∏
            keyboard = [
                [
                    InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_{p.id}"),
                    InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{p.id}")
                ],
                [
                    InlineKeyboardButton("üí∞ –ü—Ä–æ–¥–∞—Ç—å", callback_data=f"sell_{p.id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                planting_message,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ—Å–∞–¥–∫–∏ –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞
        keyboard = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–∞–¥–∫—É", callback_data="new")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ—Å–∞–¥–∫—É:",
            reply_markup=reply_markup
        )

    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö!")
        print(f"Error: {e}")

@sync_to_async
def sell_plants(planting_id: int, amount: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ç–µ–Ω–∏–π –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏"""
    try:
        planting = Planting.objects.get(id=planting_id)

        if planting.quantity < amount:
            return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞—Å—Ç–µ–Ω–∏–π. –î–æ—Å—Ç—É–ø–Ω–æ: {planting.quantity}"

        planting.quantity -= amount

        if planting.quantity == 0:
            planting.delete()
            return True, "–í–µ—Å—å –æ—Å—Ç–∞—Ç–æ–∫ –ø—Ä–æ–¥–∞–Ω. –ü–æ—Å–∞–¥–∫–∞ —É–¥–∞–ª–µ–Ω–∞."
        else:
            planting.save()
            return True, f"‚úÖ –ü—Ä–æ–¥–∞–Ω–æ {amount} —à—Ç. –û—Å—Ç–∞–ª–æ—Å—å: {planting.quantity}"

    except Planting.DoesNotExist:
        return False, "‚ùå –ü–æ—Å–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    except Exception as e:
        return False, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

async def sell(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sell"""
    args = context.args

    if len(args) != 2:
        await update.message.reply_text(
            "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç*\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/sell [ID] [–∫–æ–ª-–≤–æ]`\n"
            "–ü—Ä–∏–º–µ—Ä: `/sell 5 10`",
            parse_mode="Markdown"
        )
        return

    try:
        planting_id = int(args[0])
        amount = int(args[1])

        if amount <= 0:
            await update.message.reply_text("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return

    except ValueError:
        await update.message.reply_text("‚ùå ID –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!")
        return

    success, message = await sell_plants(planting_id, amount)
    await update.message.reply_text(message)

async def delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete"""
    if not context.args or len(context.args) != 1:
        await update.message.reply_text(
            "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç*\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/delete [ID]`\n"
            "–ü—Ä–∏–º–µ—Ä: `/delete 5`",
            parse_mode="Markdown"
        )
        return

    try:
        planting_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return

    success, message = await delete_planting(planting_id)
    await update.message.reply_text(message, parse_mode="Markdown")

async def edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /edit - –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    if not context.args or len(context.args) != 1:
        await update.message.reply_text(
            "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç*\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/edit [ID]`\n"
            "–ü—Ä–∏–º–µ—Ä: `/edit 5`",
            parse_mode="Markdown"
        )
        return

    try:
        planting_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return

    success, planting = await get_planting_info(planting_id)
    if not success:
        await update.message.reply_text("‚ùå –ü–æ—Å–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    context.user_data['edit_planting_id'] = planting_id
    context.user_data['current_quantity'] = planting.quantity

    await update.message.reply_text(
        f"üå± *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–∞–¥–∫–∏:*\n"
        f"ID: {planting.id}\n"
        f"–ö—É–ª—å—Ç—É—Ä–∞: {planting.culture.name}\n"
        f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {planting.quantity}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ç–µ–Ω–∏–π:",
        parse_mode="Markdown"
    )
    return EDIT_QUANTITY

async def edit_quantity_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    try:
        new_quantity = int(update.message.text)
        if new_quantity <= 0:
            await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return EDIT_QUANTITY

        planting_id = context.user_data['edit_planting_id']
        success, message = await edit_planting_quantity(planting_id, new_quantity)
        await update.message.reply_text(message)
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return EDIT_QUANTITY

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    await update.message.reply_text(
        "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/current - –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Å–∞–¥–∫–∏\n"
        "/new - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ—Å–∞–¥–∫—É\n"
        "/edit [ID] - –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
        "/delete [ID] - —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–∞–¥–∫—É\n"
        "/sell [ID] [–∫–æ–ª-–≤–æ] - –ø—Ä–æ–¥–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞",
        parse_mode="Markdown"
    )

async def new_planting(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ—Å–∞–¥–∫–∏"""
    cultures = await get_available_cultures()
    if not cultures:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä –¥–ª—è –ø–æ—Å–∞–¥–∫–∏!")
        return ConversationHandler.END

    message = "üå± *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É–ª—å—Ç—É—Ä—ã:*\n\n"
    keyboard = []
    
    for c in cultures:
        message += (
            f"*{c.id}: {c.name}*\n"
            f"‚îú –°–æ–∑—Ä–µ–≤–∞–Ω–∏–µ: {c.grow_days} –¥–Ω–µ–π\n"
            f"‚îú –ì–æ–¥–Ω–æ—Å—Ç—å: {c.expire_days} –¥–Ω–µ–π\n"
            f"‚îî –ì—Ä–∞–º–º/–ª–æ—Ç–æ–∫: {c.grams_per_tray} –≥\n\n"
        )
        keyboard.append([f"{c.id}: {c.name}"])

    message += "\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É –¥–ª—è –ø–æ—Å–∞–¥–∫–∏:"
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    
    await update.message.reply_text(message, parse_mode="Markdown")
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—É–ª—å—Ç—É—Ä—ã:", reply_markup=reply_markup)
    return CULTURE

async def culture_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫—É–ª—å—Ç—É—Ä—ã"""
    try:
        culture_id = int(update.message.text.split(':')[0])
        context.user_data['culture_id'] = culture_id
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫—É–ª—å—Ç—É—Ä–µ
        success, details = await get_culture_details(culture_id)
        if not success:
            await update.message.reply_text(details)
            return CULTURE
            
        await update.message.reply_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –∫—É–ª—å—Ç—É—Ä–∞:\n{details}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ç–µ–Ω–∏–π:",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode="Markdown"
        )
        return QUANTITY
    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return CULTURE

async def quantity_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π"""
    try:
        quantity = int(update.message.text)
        if quantity <= 0:
            await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return QUANTITY

        success, message = await create_planting(context.user_data['culture_id'], quantity)
        await update.message.reply_text(message)
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return QUANTITY

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å–∞–¥–∫–∏"""
    await update.message.reply_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å–∞–¥–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query

    if query.data == "new":
        return await new_planting(update, context)
    
    action, planting_id = query.data.split('_')
    
    if action == "edit":
        # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        success, planting = await get_planting_info(int(planting_id))
        if success:
            context.user_data['edit_planting_id'] = planting.id
            context.user_data['current_quantity'] = planting.quantity
            await query.edit_message_text(
                f"üå± *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–∞–¥–∫–∏:*\n"
                f"ID: {planting.id}\n"
                f"–ö—É–ª—å—Ç—É—Ä–∞: {planting.culture.name}\n"
                f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {planting.quantity}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ç–µ–Ω–∏–π:",
                parse_mode="Markdown"
            )
            return EDIT_QUANTITY
    
    elif action == "delete":
        success, message = await delete_planting(int(planting_id))
        await query.edit_message_text(
            message,
            parse_mode="Markdown"
        )
    
    elif action == "sell":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        success, planting = await get_planting_info(int(planting_id))
        if success:
            await query.edit_message_text(
                f"üí∞ *–ü—Ä–æ–¥–∞–∂–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π*\n"
                f"ID: {planting.id}\n"
                f"–ö—É–ª—å—Ç—É—Ä–∞: {planting.culture.name}\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ: {planting.quantity} —à—Ç.\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                f"`/sell {planting.id} [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]`",
                parse_mode="Markdown"
            )

async def get_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"–í–∞—à Chat ID: {update.effective_chat.id}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å–∞–¥–∫–∏
    new_planting_handler = ConversationHandler(
        entry_points=[
            CommandHandler("new", new_planting),
            CallbackQueryHandler(button_handler, pattern="^new$")
        ],
        states={
            CULTURE: [MessageHandler(filters.TEXT & ~filters.COMMAND, culture_chosen)],
            QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, quantity_chosen)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    edit_handler = ConversationHandler(
        entry_points=[
            CommandHandler("edit", edit),
            CallbackQueryHandler(button_handler, pattern="^edit_\\d+$")
        ],
        states={
            EDIT_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_quantity_chosen)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("current", current_plantings))
    application.add_handler(CommandHandler("sell", sell))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("delete", delete))
    application.add_handler(new_planting_handler)
    application.add_handler(edit_handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (delete –∏ sell)
    application.add_handler(CallbackQueryHandler(button_handler))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã get_id
    application.add_handler(CommandHandler('get_id', get_id))

    # –ó–∞–ø—É—Å–∫
    application.run_polling()


if __name__ == "__main__":
    main()
