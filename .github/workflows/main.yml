name: BotGrover CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run Tests
      run: |
        python manage.py test
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

    - name: Create backup
      env:
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_USERNAME: botgrover
      run: |
        ssh $SSH_USERNAME@$SSH_HOST "cd ~/BotGrover && \
        cp db.sqlite3 db.sqlite3.backup-$(date +%Y%m%d-%H%M%S)"

    - name: Deploy to VPS
      env:
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_USERNAME: botgrover
      run: |
        # Create deployment script
        echo "#!/bin/bash
        set -e
        cd ~/BotGrover
        git pull origin master
        source venv/bin/activate
        pip install -r requirements.txt
        python manage.py migrate
        # Restart the bot service
        sudo systemctl restart botgrover
        
        # Send deployment notification
        curl -s -X POST \
          https://api.telegram.org/bot\$TELEGRAM_BOT_TOKEN/sendMessage \
          -d chat_id=\$ADMIN_CHAT_ID \
          -d text='üöÄ Deployment successful!'" > deploy.sh
        
        # Copy and execute deployment script
        scp deploy.sh $SSH_USERNAME@$SSH_HOST:~/deploy.sh
        ssh $SSH_USERNAME@$SSH_HOST "chmod +x ~/deploy.sh && ~/deploy.sh && rm ~/deploy.sh"
      
    - name: Notify on failure
      if: failure()
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        ADMIN_CHAT_ID: ${{ secrets.ADMIN_CHAT_ID }}
      run: |
        curl -s -X POST \
          https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage \
          -d chat_id=$ADMIN_CHAT_ID \
          -d text='‚ùå Deployment failed! Check GitHub Actions for details.' 